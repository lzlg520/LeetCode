package com.lzlg.simple.q16;

import org.junit.Test;

/**
 * 颠倒给定的 32 位无符号整数的二进制位。
 * <p>
 *  
 * <p>
 * 示例 1：
 * <p>
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 * 因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 * <p>
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *  
 * <p>
 * 提示：
 * <p>
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *  
 * <p>
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 */
public class ReverseBitsTest {

    /**
     * 见Integer.reverse(int i)源码
     *
     * @param n
     * @return
     */
    public int reverseBits(int n) {
//        return Integer.reverse(n);

        /*
         * 以八位为例，表示为ABCDEFGH，其做法为：
         * （1）每一位视为一个个体，每两位为一组进行反转，得到BADCFEHG
         * （2）每两位视为一个个体，每四位为一组进行反转，得到DCBAHGFE
         * （3）每四位视为一个个体，每八位为一组进行反转，得到HGFEDCBA
         * 32位整数依次类推。
         */
        n = (n & 0x55555555) << 1 | (n >>> 1) & 0x55555555;
        n = (n & 0x33333333) << 2 | (n >>> 2) & 0x33333333;
        n = (n & 0x0f0f0f0f) << 4 | (n >>> 4) & 0x0f0f0f0f;

        /*
         * 到这里为止，每八位之间的反转已经完成，使用字母代表八位的话，
         * 现在该整数看做ABCD，接下来的操作就是将其反转为DCBA。(这个就代表了32位。）
         * （1）i<<24实际上就是将D移动到A的位置，得到D000（每个0代表8个0）。
         * （2）i&0xff00实际上是得到00C0，左移8位，将C移动到B的位置，得到0C00。
         * （3）i>>>8实际上是将B移动到C的位置，得到0ABC，再和0xff00进行相与，得到00B0。
         * （4）i>>>24实际上就是将A移动到D的位置，得到000A。
         * （5）将上述四步得到的四个值进行相与，即可得到DCBA。
         */
        n = (n << 24) | ((n & 0xff00) << 8) |
                ((n >>> 8) & 0xff00) | (n >>> 24);
        return n;
        /*
        0x为十六进制的前缀标识
        0xaaaaaaaa = 10101010101010101010101010101010 (偶数位为1，奇数位为0）
        0x55555555 = 01010101010101010101010101010101 (偶数位为0，奇数位为1）
        0x33333333 = 00110011001100110011001100110011 (1和0每隔两位交替出现)
        0xcccccccc = 11001100110011001100110011001100 (0和1每隔两位交替出现)
        0x0f0f0f0f = 00001111000011110000111100001111 (1和0每隔四位交替出现)
        0xf0f0f0f0 = 11110000111100001111000011110000 (0和1每隔四位交替出现)
         */
    }

    @Test
    public void test() {
        Integer.bitCount(1);
    }
}
